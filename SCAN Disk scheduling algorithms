#include <stdio.h>
#include <stdlib.h>

void fcfs(int req[], int n, int head){
    int dist=0;
    for(int i=0;i<n;i++){ dist += abs(head - req[i]); head = req[i]; }
    printf("FCFS total head movement = %d\n", dist);
}

void scan(int req[], int n, int head, int disk_size, int dir){ // dir: 0 left, 1 right
    int dist=0;
    // sort
    int *a = malloc(n*sizeof(int)); memcpy(a, req, n*sizeof(int));
    qsort(a, n, sizeof(int), (int(*)(const void*,const void*))strcmp);
    // simple approach: split into lower and higher
    int i;
    for(i=0;i<n;i++) if(a[i]>head) break;
    if(dir==1){ // go right
        for(int j=i;j<n;j++){ dist+=abs(head-a[j]); head=a[j]; }
        dist += abs(head-(disk_size-1)); head = disk_size-1;
        for(int j=i-1;j>=0;j--){ dist+=abs(head-a[j]); head=a[j]; }
    } else {
        for(int j=i-1;j>=0;j--){ dist+=abs(head-a[j]); head=a[j]; }
        dist += abs(head-0); head=0;
        for(int j=i;j<n;j++){ dist+=abs(head-a[j]); head=a[j]; }
    }
    printf("SCAN total head movement = %d\n", dist);
    free(a);
}

void cscan(int req[], int n, int head, int disk_size){
    int dist=0;
    int *a = malloc(n*sizeof(int)); memcpy(a, req, n*sizeof(int));
    qsort(a, n, sizeof(int), (int(*)(const void*,const void*))strcmp);
    int i; for(i=0;i<n;i++) if(a[i]>head) break;
    for(int j=i;j<n;j++){ dist+=abs(head-a[j]); head=a[j]; }
    dist += abs(head - (disk_size-1));
    dist += disk_size-1; // wrap to start
    head = 0;
    for(int j=0;j<i;j++){ dist+=abs(head-a[j]); head=a[j]; }
    printf("C-SCAN total head movement = %d\n", dist);
    free(a);
}

int main(){
    int req[] = {95,180,34,119,11,123,62,64};
    int n = sizeof(req)/sizeof(req[0]);
    fcfs(req,n,50);
    // (!) scan & cscan above use qsort with strcmp hack â€” to keep snippet short; prefer proper comparator if extending.
    return 0;
}
