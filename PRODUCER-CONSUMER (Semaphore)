#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define SIZE 5
int buffer[SIZE];
int in=0,out=0;
sem_t empty, full;
pthread_mutex_t m;

void *producer(void *arg){
    for(int i=1;i<=10;i++){
        sem_wait(&empty);
        pthread_mutex_lock(&m);
        buffer[in]=i; in=(in+1)%SIZE;
        printf("Produced %d\n", i);
        pthread_mutex_unlock(&m);
        sem_post(&full);
        sleep(1);
    }
    return NULL;
}

void *consumer(void *arg){
    for(int i=1;i<=10;i++){
        sem_wait(&full);
        pthread_mutex_lock(&m);
        int val = buffer[out]; out=(out+1)%SIZE;
        printf("Consumed %d\n", val);
        pthread_mutex_unlock(&m);
        sem_post(&empty);
    }
    return NULL;
}

int main(){
    pthread_t p,c;
    sem_init(&empty,0,SIZE); sem_init(&full,0,0); pthread_mutex_init(&m,NULL);
    pthread_create(&p,NULL,producer,NULL); pthread_create(&c,NULL,consumer,NULL);
    pthread_join(p,NULL); pthread_join(c,NULL);
    sem_destroy(&empty); sem_destroy(&full); pthread_mutex_destroy(&m);
    return 0;
}
